{"version":3,"sources":["components/Post.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","utils/RESTmethods.ts","components/Comment.tsx","components/PostDetails.tsx","components/User.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["Post","post","selectedPost","setSelectedPost","handleSelectPost","newPost","isPostSelected","id","title","className","type","classNames","onClick","undefined","PostsList","posts","map","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","json","Error","client","NewCommentForm","postId","setComments","useState","name","setName","setBody","email","setEmail","isNameAllright","setIsNameAllright","isEmailAllright","setIsEmailAllright","isBodyAllright","setIsBodyAllright","isLoading","setIsLoading","onSubmit","e","preventDefault","trim","res","prevCom","finally","htmlFor","value","placeholder","onChange","target","Comment","comment","handleDeleteComment","commentId","filter","com","href","PostDetails","comments","isWritingComment","setIsWritingComment","isError","setIsError","useEffect","catch","length","User","user","selectedUser","handleSelectUser","classnames","UserSelector","setSelectedUser","users","setUsers","isDropdownVisible","setIsDropdownVisible","handleDropdownAppear","newUser","role","App","setPosts","userId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf626676.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { PostInt } from '../types/PostInt';\n\ntype PostProps = {\n  post: PostInt,\n  selectedPost: PostInt | undefined,\n  setSelectedPost: (newPost: PostInt | undefined) => void,\n};\n\nexport const Post: React.FC<PostProps> = ({\n  post,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  const handleSelectPost = (newPost: PostInt | undefined) => {\n    setSelectedPost(newPost);\n  };\n\n  const isPostSelected = post.id === selectedPost?.id;\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{post.id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {post.title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={classNames('button', 'is-link', {\n            'is-light': !isPostSelected,\n          })}\n          onClick={() => {\n            return isPostSelected\n              ? handleSelectPost(undefined)\n              : handleSelectPost(post);\n          }}\n        >\n          {isPostSelected ? 'Close' : 'Open'}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { PostInt } from '../types/PostInt';\nimport { Post } from './Post';\n\ntype PostsListProps = {\n  posts: PostInt[],\n  selectedPost: PostInt | undefined,\n  setSelectedPost: (newPost: PostInt | undefined) => void,\n};\n\nexport const PostsList: React.FC<PostsListProps> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <Post\n            post={post}\n            key={post.id}\n            selectedPost={selectedPost}\n            setSelectedPost={setSelectedPost}\n          />\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error('Error');\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { Dispatch, SetStateAction, useState } from 'react';\nimport classNames from 'classnames';\nimport { addComment } from '../utils/RESTmethods';\nimport { CommentInt } from '../types/CommentInt';\n\ntype NewCommentFormProps = {\n  postId: number,\n  setComments: Dispatch<SetStateAction<CommentInt[]>>,\n};\n\nexport const NewCommentForm: React.FC<NewCommentFormProps> = ({\n  postId,\n  setComments,\n}) => {\n  const [name, setName] = useState('');\n  const [body, setBody] = useState('');\n  const [email, setEmail] = useState('');\n  const [isNameAllright, setIsNameAllright] = useState(true);\n  const [isEmailAllright, setIsEmailAllright] = useState(true);\n  const [isBodyAllright, setIsBodyAllright] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (name.trim() && body.trim() && email.trim()) {\n      setIsLoading(true);\n\n      addComment({\n        postId,\n        name,\n        email,\n        body,\n      })\n        .then(res => {\n          setComments(prevCom => [...prevCom, res]);\n          setBody('');\n        })\n        .finally(() => setIsLoading(false));\n    }\n\n    if (!name.trim()) {\n      setIsNameAllright(false);\n    }\n\n    if (!body.trim()) {\n      setIsBodyAllright(false);\n    }\n\n    if (!email.trim()) {\n      setIsEmailAllright(false);\n    }\n  };\n\n  const handleClear = () => {\n    setBody('');\n    setName('');\n    setEmail('');\n    setIsNameAllright(true);\n    setIsEmailAllright(true);\n    setIsBodyAllright(true);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            value={name}\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': !isNameAllright,\n            })}\n            onChange={(e) => {\n              setName(e.target.value);\n              setIsNameAllright(true);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!isNameAllright && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!isNameAllright && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            value={email}\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': !isEmailAllright,\n            })}\n            onChange={(e) => {\n              setEmail(e.target.value);\n              setIsEmailAllright(true);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {!isEmailAllright && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!isEmailAllright && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            value={body}\n            className={classNames('textarea', {\n              'is-danger': !isBodyAllright,\n            })}\n            onChange={(e) => {\n              setBody(e.target.value);\n              setIsBodyAllright(true);\n            }}\n          />\n        </div>\n\n        {!isBodyAllright && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button', 'is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => handleClear()}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { CommentData, CommentInt } from '../types/CommentInt';\nimport { PostInt } from '../types/PostInt';\nimport { UserInt } from '../types/UserInt';\nimport { client } from './fetchClient';\n\nexport const getUser = () => client.get<UserInt[]>('/users');\n\nexport const getUserPost = (userId: number) => {\n  return client.get<PostInt[]>(`/posts?userId=${userId}`);\n};\n\nexport const getPostComments = (postId: number) => {\n  return client.get<CommentInt[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (data: CommentData) => {\n  return client.post<CommentInt>('/comments', data);\n};\n\nexport const deleteComment = (commnetId: number) => {\n  return client.delete(`/comments/${commnetId}`);\n};\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { CommentInt } from '../types/CommentInt';\nimport { deleteComment } from '../utils/RESTmethods';\n\ntype CommentProps = {\n  comment: CommentInt,\n  setComments: Dispatch<SetStateAction<CommentInt[]>>,\n};\n\nexport const Comment: React.FC<CommentProps> = ({\n  comment,\n  setComments,\n}) => {\n  const {\n    email,\n    name,\n    body,\n    id,\n  } = comment;\n\n  const handleDeleteComment = (commentId: number) => {\n    setComments(prevCom => [...prevCom].filter(com => com.id !== commentId));\n    deleteComment(commentId);\n  };\n\n  return (\n    <article className=\"message is-small\" data-cy=\"Comment\">\n      <div className=\"message-header\">\n        <a\n          href={`mailto:${email}`}\n          data-cy=\"CommentAuthor\"\n        >\n          {name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => handleDeleteComment(id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {body}\n      </div>\n    </article>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { PostInt } from '../types/PostInt';\nimport { getPostComments } from '../utils/RESTmethods';\nimport { CommentInt } from '../types/CommentInt';\nimport { Comment } from './Comment';\n\ntype PostDetailProps = {\n  selectedPost: PostInt,\n};\n\nexport const PostDetails: React.FC<PostDetailProps> = ({\n  selectedPost,\n}) => {\n  const { id, body, title } = selectedPost;\n  const [comments, setComments] = useState<CommentInt[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isWritingComment, setIsWritingComment] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const handleCommentWriting = () => setIsWritingComment(!isWritingComment);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setIsWritingComment(false);\n\n    getPostComments(id)\n      .then(setComments)\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, [selectedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {`${body}`}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {!isLoading && isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isLoading && !isError && comments.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!isLoading && !isError && comments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <Comment\n                  key={comment.id}\n                  comment={comment}\n                  setComments={setComments}\n                />\n              ))}\n            </>\n          )}\n\n          {!isLoading && !isError && !isWritingComment && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => handleCommentWriting()}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {!isLoading && isWritingComment && (\n          <NewCommentForm\n            postId={selectedPost.id}\n            setComments={setComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport { UserInt } from '../types/UserInt';\n\ntype UserProps = {\n  user: UserInt,\n  selectedUser: UserInt | undefined,\n  handleSelectUser: (newUser: UserInt) => void,\n};\n\nexport const User: React.FC<UserProps> = ({\n  user,\n  selectedUser,\n  handleSelectUser,\n}) => {\n  return (\n    <a\n      href={`#user-${user.id}`}\n      className={classnames('dropdown-item', {\n        'is-active': selectedUser?.id === user.id,\n      })}\n      onClick={() => handleSelectUser(user)}\n    >\n      {user.name}\n    </a>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { UserInt } from '../types/UserInt';\nimport { getUser } from '../utils/RESTmethods';\nimport { User } from './User';\n\ntype UserSelectorProps = {\n  selectedUser: UserInt | undefined,\n  setSelectedUser: (newUser: UserInt) => void,\n  setIsError: (isError: boolean) => void,\n};\n\nexport const UserSelector: React.FC<UserSelectorProps> = ({\n  selectedUser,\n  setSelectedUser,\n  setIsError,\n}) => {\n  const [users, setUsers] = useState<UserInt[]>([]);\n  const [isDropdownVisible, setIsDropdownVisible] = useState(false);\n\n  useEffect(() => {\n    getUser()\n      .then(setUsers)\n      .catch(() => {\n        setIsError(true);\n      });\n  }, []);\n\n  const handleDropdownAppear = () => setIsDropdownVisible(!isDropdownVisible);\n  const handleSelectUser = (newUser: UserInt) => {\n    setSelectedUser(newUser);\n    handleDropdownAppear();\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => handleDropdownAppear()}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isDropdownVisible && users.length > 0 && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <User\n                key={user.id}\n                user={user}\n                selectedUser={selectedUser}\n                handleSelectUser={handleSelectUser}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { UserInt } from './types/UserInt';\nimport { PostInt } from './types/PostInt';\nimport { getUserPost } from './utils/RESTmethods';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<UserInt>();\n  const [selectedPost, setSelectedPost] = useState<PostInt | undefined>();\n  const [posts, setPosts] = useState<PostInt[]>();\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoading(true);\n      getUserPost(selectedUser.id)\n        .then(setPosts)\n        .catch(() => setIsError(true))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  setIsError={setIsError}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && !isError && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {!isLoading && isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!isLoading && posts && posts.length === 0 && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {!isLoading && posts && posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                  />\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          {selectedPost && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                { 'Sidebar--open': selectedPost },\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={selectedPost}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}